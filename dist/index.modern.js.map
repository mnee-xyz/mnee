{"version":3,"file":"index.modern.js","sources":["../src/mneeCosignTemplate.ts","../src/utils/helper.ts","../src/mneeService.ts","../src/index.ts"],"sourcesContent":["import {\n  Hash,\n  LockingScript,\n  OP,\n  type PrivateKey,\n  type PublicKey,\n  type Script,\n  type ScriptTemplate,\n  type Transaction,\n  TransactionSignature,\n  UnlockingScript,\n  Utils,\n} from \"@bsv/sdk\";\n\n/**\n * P2PKH (Pay To Public Key Hash) class implementing ScriptTemplate.\n *\n * This class provides methods to create Pay To Public Key Hash locking and unlocking scripts, including the unlocking of P2PKH UTXOs with the private key.\n */\nexport default class CosignTemplate implements ScriptTemplate {\n  /**\n   * Creates a P2PKH locking script for a given public key hash or address string\n   *\n   * @param {number[] | string} userPKHash or address - An array or address representing the public key hash of the owning user.\n   * @param {PublicKey} approverPubKey - Public key of the approver.\n   * @returns {LockingScript} - A P2PKH locking script.\n   */\n  lock(\n    userPKHash: string | number[],\n    approverPubKey: PublicKey\n  ): LockingScript {\n    let pkhash: number[] = [];\n    if (typeof userPKHash === \"string\") {\n      const hash = Utils.fromBase58Check(userPKHash);\n      if (hash.prefix[0] !== 0x00 && hash.prefix[0] !== 0x6f)\n        throw new Error(\"only P2PKH is supported\");\n      pkhash = hash.data as number[];\n    } else {\n      pkhash = userPKHash;\n    }\n    const lockingScript = new LockingScript();\n    lockingScript\n      .writeOpCode(OP.OP_DUP)\n      .writeOpCode(OP.OP_HASH160)\n      .writeBin(pkhash)\n      .writeOpCode(OP.OP_EQUALVERIFY)\n      .writeOpCode(OP.OP_CHECKSIGVERIFY)\n      .writeBin(approverPubKey.encode(true) as number[])\n      .writeOpCode(OP.OP_CHECKSIG);\n\n    return lockingScript;\n  }\n\n  /**\n   * Creates a function that generates a P2PKH unlocking script along with its signature and length estimation.\n   *\n   * The returned object contains:\n   * 1. `sign` - A function that, when invoked with a transaction and an input index,\n   *    produces an unlocking script suitable for a P2PKH locked output.\n   * 2. `estimateLength` - A function that returns the estimated length of the unlocking script in bytes.\n   *\n   * @param {PrivateKey} userPrivateKey - The private key used for signing the transaction.\n   * @param {'all'|'none'|'single'} signOutputs - The signature scope for outputs.\n   * @param {boolean} anyoneCanPay - Flag indicating if the signature allows for other inputs to be added later.\n   * @param {number} sourceSatoshis - Optional. The amount being unlocked. Otherwise the input.sourceTransaction is required.\n   * @param {Script} lockingScript - Optional. The lockinScript. Otherwise the input.sourceTransaction is required.\n   * @returns {Object} - An object containing the `sign` and `estimateLength` functions.\n   */\n  userUnlock(\n    userPrivateKey: PrivateKey,\n    signOutputs: \"all\" | \"none\" | \"single\" = \"all\",\n    anyoneCanPay = false,\n    sourceSatoshis?: number,\n    lockingScript?: Script\n  ): {\n    sign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n    estimateLength: () => Promise<182>;\n  } {\n    return {\n      sign: async (tx: Transaction, inputIndex: number) => {\n        let signatureScope = TransactionSignature.SIGHASH_FORKID;\n        if (signOutputs === \"all\") {\n          signatureScope |= TransactionSignature.SIGHASH_ALL;\n        }\n        if (signOutputs === \"none\") {\n          signatureScope |= TransactionSignature.SIGHASH_NONE;\n        }\n        if (signOutputs === \"single\") {\n          signatureScope |= TransactionSignature.SIGHASH_SINGLE;\n        }\n        if (anyoneCanPay) {\n          signatureScope |= TransactionSignature.SIGHASH_ANYONECANPAY;\n        }\n\n        const input = tx.inputs[inputIndex];\n\n        const otherInputs = tx.inputs.filter(\n          (_, index) => index !== inputIndex\n        );\n\n        const sourceTXID = input.sourceTXID\n          ? input.sourceTXID\n          : input.sourceTransaction?.id(\"hex\");\n        if (!sourceTXID) {\n          throw new Error(\n            \"The input sourceTXID or sourceTransaction is required for transaction signing.\"\n          );\n        }\n        sourceSatoshis ||=\n          input.sourceTransaction?.outputs[input.sourceOutputIndex].satoshis;\n        if (!sourceSatoshis) {\n          throw new Error(\n            \"The sourceSatoshis or input sourceTransaction is required for transaction signing.\"\n          );\n        }\n        lockingScript ||=\n          input.sourceTransaction?.outputs[input.sourceOutputIndex]\n            .lockingScript;\n        if (!lockingScript) {\n          throw new Error(\n            \"The lockingScript or input sourceTransaction is required for transaction signing.\"\n          );\n        }\n\n        const preimage = TransactionSignature.format({\n          sourceTXID,\n          sourceOutputIndex: input.sourceOutputIndex,\n          sourceSatoshis,\n          transactionVersion: tx.version,\n          otherInputs,\n          inputIndex,\n          outputs: tx.outputs,\n          inputSequence: input.sequence || 0xffffffff,\n          subscript: lockingScript,\n          lockTime: tx.lockTime,\n          scope: signatureScope,\n        });\n        const rawSignature = userPrivateKey.sign(Hash.sha256(preimage));\n        const sig = new TransactionSignature(\n          rawSignature.r,\n          rawSignature.s,\n          signatureScope\n        );\n        const unlockScript = new UnlockingScript();\n        unlockScript.writeBin(sig.toChecksigFormat());\n        unlockScript.writeBin(\n          userPrivateKey.toPublicKey().encode(true) as number[]\n        );\n        return unlockScript;\n      },\n      estimateLength: async () => {\n        // public key (1+33) + signature (1+73) + approver signature (1+73)\n        // Note: We add 1 to each element's length because of the associated OP_PUSH\n        return 182;\n      },\n    };\n  }\n\n  /**\n   * Creates a function that generates a P2PKH unlocking script along with its signature and length estimation.\n   *\n   * The returned object contains:\n   * 1. `sign` - A function that, when invoked with a transaction and an input index,\n   *    produces an unlocking script suitable for a P2PKH locked output.\n   * 2. `estimateLength` - A function that returns the estimated length of the unlocking script in bytes.\n   *\n   * @param {PrivateKey} approverPrivateKey - The private key used for signing the transaction.\n   * @param {'all'|'none'|'single'} signOutputs - The signature scope for outputs.\n   * @param {boolean} anyoneCanPay - Flag indicating if the signature allows for other inputs to be added later.\n   * @param {number} sourceSatoshis - Optional. The amount being unlocked. Otherwise the input.sourceTransaction is required.\n   * @param {Script} lockingScript - Optional. The lockinScript. Otherwise the input.sourceTransaction is required.\n   * @returns {Object} - An object containing the `sign` and `estimateLength` functions.\n   */\n  unlock(\n    approverPrivateKey: PrivateKey,\n    userSigScript: Script,\n    signOutputs: \"all\" | \"none\" | \"single\" = \"all\",\n    anyoneCanPay = false,\n    sourceSatoshis?: number,\n    lockingScript?: Script\n  ): {\n    sign: (tx: Transaction, inputIndex: number) => Promise<UnlockingScript>;\n    estimateLength: () => Promise<182>;\n  } {\n    return {\n      sign: async (tx: Transaction, inputIndex: number) => {\n        let signatureScope = TransactionSignature.SIGHASH_FORKID;\n        if (signOutputs === \"all\") {\n          signatureScope |= TransactionSignature.SIGHASH_ALL;\n        }\n        if (signOutputs === \"none\") {\n          signatureScope |= TransactionSignature.SIGHASH_NONE;\n        }\n        if (signOutputs === \"single\") {\n          signatureScope |= TransactionSignature.SIGHASH_SINGLE;\n        }\n        if (anyoneCanPay) {\n          signatureScope |= TransactionSignature.SIGHASH_ANYONECANPAY;\n        }\n\n        const input = tx.inputs[inputIndex];\n\n        const otherInputs = tx.inputs.filter(\n          (_, index) => index !== inputIndex\n        );\n\n        const sourceTXID = input.sourceTXID\n          ? input.sourceTXID\n          : input.sourceTransaction?.id(\"hex\");\n        if (!sourceTXID) {\n          throw new Error(\n            \"The input sourceTXID or sourceTransaction is required for transaction signing.\"\n          );\n        }\n        sourceSatoshis ||=\n          input.sourceTransaction?.outputs[input.sourceOutputIndex].satoshis;\n        if (!sourceSatoshis) {\n          throw new Error(\n            \"The sourceSatoshis or input sourceTransaction is required for transaction signing.\"\n          );\n        }\n        lockingScript ||=\n          input.sourceTransaction?.outputs[input.sourceOutputIndex]\n            .lockingScript;\n        if (!lockingScript) {\n          throw new Error(\n            \"The lockingScript or input sourceTransaction is required for transaction signing.\"\n          );\n        }\n\n        const preimage = TransactionSignature.format({\n          sourceTXID,\n          sourceOutputIndex: input.sourceOutputIndex,\n          sourceSatoshis,\n          transactionVersion: tx.version,\n          otherInputs,\n          inputIndex,\n          outputs: tx.outputs,\n          inputSequence: input.sequence || 0xffffffff,\n          subscript: lockingScript,\n          lockTime: tx.lockTime,\n          scope: signatureScope,\n        });\n        const rawSignature = approverPrivateKey.sign(Hash.sha256(preimage));\n        const sig = new TransactionSignature(\n          rawSignature.r,\n          rawSignature.s,\n          signatureScope\n        );\n        const unlockScript = new UnlockingScript();\n        unlockScript.writeBin(sig.toChecksigFormat());\n        unlockScript.writeScript(userSigScript);\n        return unlockScript;\n      },\n      estimateLength: async () => {\n        // public key (1+33) + signature (1+73) + approver signature (1+73)\n        // Note: We add 1 to each element's length because of the associated OP_PUSH\n        return 182;\n      },\n    };\n  }\n}\n","import { Hash, OP, Script, Transaction, Utils } from '@bsv/sdk';\nimport {\n  Inscription,\n  MNEEConfig,\n  MneeInscription,\n  MneeSync,\n  ParsedCosigner,\n  TxHistory,\n  TxStatus,\n  TxType,\n} from '../mnee.types';\n\nexport const parseInscription = (script: Script) => {\n  let fromPos: number | undefined;\n  for (let i = 0; i < script.chunks.length; i++) {\n    const chunk = script.chunks[i];\n    if (\n      i >= 2 &&\n      chunk.data?.length === 3 &&\n      Utils.toUTF8(chunk.data) == 'ord' &&\n      script.chunks[i - 1].op == OP.OP_IF &&\n      script.chunks[i - 2].op == OP.OP_FALSE\n    ) {\n      fromPos = i + 1;\n    }\n  }\n  if (fromPos === undefined) return;\n\n  const insc = {\n    file: { hash: '', size: 0, type: '' },\n    fields: {},\n  } as Inscription;\n\n  for (let i = fromPos; i < script.chunks.length; i += 2) {\n    const field = script.chunks[i];\n    if (field.op == OP.OP_ENDIF) {\n      break;\n    }\n    if (field.op > OP.OP_16) return;\n    const value = script.chunks[i + 1];\n    if (value.op > OP.OP_PUSHDATA4) return;\n\n    if (field.data?.length) continue;\n\n    let fieldNo = 0;\n    if (field.op > OP.OP_PUSHDATA4 && field.op <= OP.OP_16) {\n      fieldNo = field.op - 80;\n    } else if (field.data?.length) {\n      fieldNo = field.data[0];\n    }\n    switch (fieldNo) {\n      case 0:\n        insc.file!.size = value.data?.length || 0;\n        if (!value.data?.length) break;\n        insc.file!.hash = Utils.toBase64(Hash.sha256(value.data));\n        insc.file!.content = value.data;\n        break;\n      case 1:\n        insc.file!.type = Buffer.from(value.data || []).toString();\n        break;\n    }\n  }\n\n  return insc;\n};\n\nexport const parseCosignerScripts = (scripts: any): ParsedCosigner[] => {\n  return scripts.map((script: any) => {\n    const chunks = script.chunks;\n    for (let i = 0; i <= chunks.length - 4; i++) {\n      if (\n        chunks.length > i + 6 &&\n        chunks[0 + i].op === OP.OP_DUP &&\n        chunks[1 + i].op === OP.OP_HASH160 &&\n        chunks[2 + i].data?.length === 20 &&\n        chunks[3 + i].op === OP.OP_EQUALVERIFY &&\n        chunks[4 + i].op === OP.OP_CHECKSIGVERIFY &&\n        chunks[5 + i].data?.length === 33 &&\n        chunks[6 + i].op === OP.OP_CHECKSIG\n      ) {\n        return {\n          cosigner: Utils.toHex(chunks[5 + i].data || []),\n          address: Utils.toBase58Check(chunks[2 + i].data || [], [0]),\n        };\n      } else if (\n        // P2PKH\n        chunks[0 + i].op === OP.OP_DUP &&\n        chunks[1 + i].op === OP.OP_HASH160 &&\n        chunks[2 + i].data?.length === 20 &&\n        chunks[3 + i].op === OP.OP_EQUALVERIFY &&\n        chunks[4 + i].op === OP.OP_CHECKSIG\n      ) {\n        return {\n          cosigner: '',\n          address: Utils.toBase58Check(chunks[2 + i].data || [], [0]),\n        };\n      }\n    }\n  });\n};\n\nexport const parseSyncToTxHistory = (sync: MneeSync, address: string, config: MNEEConfig): TxHistory | null => {\n  const txType: TxType = sync.senders.includes(address) ? 'send' : 'receive';\n  const txStatus: TxStatus = sync.height > 0 ? 'confirmed' : 'unconfirmed';\n\n  if (!sync.rawtx) return null;\n\n  const txArray = Utils.toArray(sync.rawtx, 'base64');\n  const txHex = Utils.toHex(txArray);\n  const tx = Transaction.fromHex(txHex);\n\n  const outScripts = tx.outputs.map((output) => output.lockingScript);\n  const mneeScripts = parseCosignerScripts(outScripts);\n  const parsedOutScripts = outScripts.map(parseInscription);\n  const mneeAddresses = mneeScripts.map((script) => script.address);\n\n  const feeAddressIndex = mneeAddresses.indexOf(config.feeAddress);\n  const sender = sync.senders[0]; // only one sender for now\n\n  let fee = 0;\n  const counterpartyAmounts = new Map<string, number>();\n\n  parsedOutScripts.forEach((parsedScript, index) => {\n    const content = parsedScript?.file?.content;\n    if (!content) return;\n\n    const inscriptionData = Utils.toUTF8(content);\n    if (!inscriptionData) return;\n\n    let inscriptionJson: MneeInscription;\n    try {\n      inscriptionJson = JSON.parse(inscriptionData);\n    } catch (err) {\n      console.error('Failed to parse inscription JSON:', err);\n      return;\n    }\n\n    if (inscriptionJson.p !== 'bsv-20' || inscriptionJson.id !== config.tokenId) return;\n\n    const inscriptionAmt = parseInt(inscriptionJson.amt, 10);\n    if (Number.isNaN(inscriptionAmt)) return;\n\n    if (feeAddressIndex === index && sender === address) {\n      fee += inscriptionAmt;\n      return;\n    }\n\n    const outAddr = mneeAddresses[index];\n    const prevAmt = counterpartyAmounts.get(outAddr) || 0;\n    counterpartyAmounts.set(outAddr, prevAmt + inscriptionAmt);\n  });\n\n  const amountSentToAddress = counterpartyAmounts.get(address) || 0;\n\n  if (txType === 'send') {\n    const senderAmt = counterpartyAmounts.get(sender) || 0;\n    counterpartyAmounts.set(sender, senderAmt - amountSentToAddress);\n  }\n\n  let counterparties: { address: string; amount: number }[] = [];\n  if (txType === 'receive') {\n    counterparties = [{ address: sender, amount: amountSentToAddress }];\n  } else {\n    counterparties = Array.from(counterpartyAmounts.entries())\n      .map(([addr, amt]) => ({ address: addr, amount: amt }))\n      .filter((cp) => cp.address !== address && cp.address !== config.feeAddress && cp.amount > 0);\n  }\n\n  const totalCounterpartyAmount = counterparties.reduce((sum, cp) => sum + cp.amount, 0);\n\n  return {\n    txid: sync.txid,\n    height: sync.height,\n    type: txType,\n    status: txStatus,\n    amount: totalCounterpartyAmount,\n    fee,\n    score: sync.score,\n    counterparties,\n  };\n};\n","import {\n  BroadcastFailure,\n  BroadcastResponse,\n  Hash,\n  P2PKH,\n  PrivateKey,\n  PublicKey,\n  Script,\n  Transaction,\n  TransactionSignature,\n  UnlockingScript,\n  Utils,\n} from '@bsv/sdk';\nimport {\n  Environment,\n  GetSignatures,\n  MNEEBalance,\n  MNEEConfig,\n  MneeInscription,\n  SdkConfig,\n  MNEEOperation,\n  MneeSync,\n  MNEEUtxo,\n  ParseTxResponse,\n  SendMNEE,\n  SignatureRequest,\n  SignatureResponse,\n  TxHistory,\n  TxHistoryResponse,\n  TxOperation,\n} from './mnee.types.js';\nimport CosignTemplate from './mneeCosignTemplate.js';\nimport * as jsOneSat from 'js-1sat-ord';\nimport { parseCosignerScripts, parseInscription, parseSyncToTxHistory } from './utils/helper.js';\n\nexport class MNEEService {\n  private readonly prodTokenId = 'ae59f3b898ec61acbdb6cc7a245fabeded0c094bf046f35206a3aec60ef88127_0';\n  private readonly prodApprover = '020a177d6a5e6f3a8689acd2e313bd1cf0dcf5a243d1cc67b7218602aee9e04b2f';\n  private readonly prodAddress = '1inHbiwj2jrEcZPiSYnfgJ8FmS1Bmk4Dh';\n  private readonly devTokenId = '833a7720966a2a435db28d967385e8aa7284b6150ebb39482cc5228b73e1703f_0';\n  private readonly devAddress = '1A1QNEkLuvAALsmG4Me3iubP8zb5C6jpv5';\n  private readonly qaTokenId = '55cde0733049a226fdb6abc387ee9dcd036e859f7cbc69ab90050c0435139f00_0';\n  private readonly qaAddress = '1BW7cejD27vDLiHsbK1Hvf1y4JTKvC1Yue';\n  private readonly stageTokenId = '833a7720966a2a435db28d967385e8aa7284b6150ebb39482cc5228b73e1703f_0';\n  private readonly stageAddress = '1AZNdbFYBDFTAEgzZMfPzANxyNrpGJZAUY';\n  private readonly productionMneeApi = 'https://proxy-api.mnee.net';\n  private readonly sandboxMneeApi = 'https://stg-api-cosigner.mnee.net';\n  private readonly gorillaPoolApi = 'https://ordinals.1sat.app';\n  private mneeApiKey = '92982ec1c0975f31979da515d46bae9f';\n  private mneeConfig: MNEEConfig | undefined;\n  private mneeApi: string;\n  constructor(config: SdkConfig) {\n    if (config?.apiKey) this.mneeApiKey = config.apiKey;\n    this.mneeApi = config.environment === 'production' ? this.productionMneeApi : this.sandboxMneeApi;\n    this.getCosignerConfig();\n  }\n\n  public async getCosignerConfig(): Promise<MNEEConfig | undefined> {\n    try {\n      const response = await fetch(`${this.mneeApi}/v1/config?auth_token=${this.mneeApiKey}`, { method: 'GET' });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data: MNEEConfig = await response.json();\n      this.mneeConfig = data;\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch config:', error);\n      return undefined;\n    }\n  }\n\n  public toAtomicAmount(amount: number): number {\n    if (!this.mneeConfig) throw new Error('Config not fetched');\n    return Math.round(amount * 10 ** this.mneeConfig.decimals);\n  }\n\n  public fromAtomicAmount(amount: number): number {\n    if (!this.mneeConfig) throw new Error('Config not fetched');\n    return amount / 10 ** this.mneeConfig.decimals;\n  }\n\n  private async createInscription(recipient: string, amount: number, config: MNEEConfig) {\n    const inscriptionData = {\n      p: 'bsv-20',\n      op: 'transfer',\n      id: config.tokenId,\n      amt: amount.toString(),\n    };\n    return {\n      lockingScript: jsOneSat.applyInscription(\n        new CosignTemplate().lock(recipient, PublicKey.fromString(config.approver)),\n        {\n          dataB64: Buffer.from(JSON.stringify(inscriptionData)).toString('base64'),\n          contentType: 'application/bsv-20',\n        },\n      ),\n      satoshis: 1,\n    };\n  }\n\n  private async getUtxos(address: string, ops: MNEEOperation[] = ['transfer', 'deploy+mint']): Promise<MNEEUtxo[]> {\n    try {\n      const response = await fetch(`${this.mneeApi}/v1/utxos?auth_token=${this.mneeApiKey}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify([address]),\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data: MNEEUtxo[] = await response.json();\n      if (ops.length) {\n        return data.filter((utxo) =>\n          ops.includes(utxo.data.bsv21.op.toLowerCase() as 'transfer' | 'burn' | 'deploy+mint'),\n        );\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch UTXOs:', error);\n      return [];\n    }\n  }\n\n  private async broadcast(tx: Transaction): Promise<BroadcastResponse | BroadcastFailure> {\n    const url = `${this.gorillaPoolApi}/v5/tx`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/octet-stream' },\n        body: Buffer.from(tx.toBinary()),\n      });\n      const body = await response.json();\n      if (!response.ok) {\n        return {\n          status: 'error',\n          code: response.status.toString(),\n          description: body.error || 'Unknown error',\n        } as BroadcastFailure;\n      }\n      return {\n        status: 'success',\n        txid: body.txid,\n        message: 'Transaction broadcast successfully',\n      } as BroadcastResponse;\n    } catch (error) {\n      console.error('Failed to broadcast:', error);\n      return {\n        status: 'error',\n        code: 'UNKNOWN',\n        description: error instanceof Error ? error.message : 'Unknown error',\n      } as BroadcastFailure;\n    }\n  }\n\n  private async fetchBeef(txid: string): Promise<Transaction> {\n    const resp = await fetch(`${this.gorillaPoolApi}/v5/tx/${txid}/beef`);\n    if (resp.status === 404) throw new Error('Transaction not found');\n    if (resp.status !== 200) {\n      throw new Error(`${resp.status} - Failed to fetch beef for tx ${txid}`);\n    }\n    const beef = [...Buffer.from(await resp.arrayBuffer())];\n    return Transaction.fromAtomicBEEF(beef);\n  }\n\n  private async getSignatures(\n    request: GetSignatures,\n    privateKey: PrivateKey,\n  ): Promise<{\n    sigResponses?: SignatureResponse[];\n    error?: { message: string; cause?: any };\n  }> {\n    try {\n      const DEFAULT_SIGHASH_TYPE = 65;\n      let tx: Transaction;\n      switch (request.format) {\n        case 'beef':\n          tx = Transaction.fromHexBEEF(request.rawtx);\n          break;\n        case 'ef':\n          tx = Transaction.fromHexEF(request.rawtx);\n          break;\n        default:\n          tx = Transaction.fromHex(request.rawtx);\n          break;\n      }\n      const sigResponses: SignatureResponse[] = request.sigRequests.flatMap((sigReq: SignatureRequest) => {\n        return [privateKey].map((privKey: PrivateKey) => {\n          const preimage = TransactionSignature.format({\n            sourceTXID: sigReq.prevTxid,\n            sourceOutputIndex: sigReq.outputIndex,\n            sourceSatoshis: sigReq.satoshis,\n            transactionVersion: tx.version,\n            otherInputs: tx.inputs.filter((_, index) => index !== sigReq.inputIndex),\n            inputIndex: sigReq.inputIndex,\n            outputs: tx.outputs,\n            inputSequence: tx.inputs[sigReq.inputIndex].sequence || 0,\n            subscript: sigReq.script\n              ? Script.fromHex(sigReq.script)\n              : new P2PKH().lock(privKey.toPublicKey().toAddress()),\n            lockTime: tx.lockTime,\n            scope: sigReq.sigHashType || DEFAULT_SIGHASH_TYPE,\n          });\n          const rawSignature = privKey.sign(Hash.sha256(preimage));\n          const sig = new TransactionSignature(\n            rawSignature.r,\n            rawSignature.s,\n            sigReq.sigHashType || DEFAULT_SIGHASH_TYPE,\n          );\n          return {\n            sig: Utils.toHex(sig.toChecksigFormat()),\n            pubKey: privKey.toPublicKey().toString(),\n            inputIndex: sigReq.inputIndex,\n            sigHashType: sigReq.sigHashType || DEFAULT_SIGHASH_TYPE,\n            csIdx: sigReq.csIdx,\n          };\n        });\n      });\n      return Promise.resolve({ sigResponses });\n    } catch (err: any) {\n      console.error('getSignatures error', err);\n      return {\n        error: {\n          message: err.message ?? 'unknown',\n          cause: err.cause,\n        },\n      };\n    }\n  }\n\n  public async transfer(request: SendMNEE[], wif: string): Promise<{ txid?: string; rawtx?: string; error?: string }> {\n    try {\n      const config = this.mneeConfig || (await this.getCosignerConfig());\n      if (!config) throw new Error('Config not fetched');\n\n      const totalAmount = request.reduce((sum, req) => sum + req.amount, 0);\n      if (totalAmount <= 0) return { error: 'Invalid amount' };\n      const totalAtomicTokenAmount = this.toAtomicAmount(totalAmount);\n\n      const privateKey = PrivateKey.fromWif(wif);\n      const address = privateKey.toAddress();\n      const utxos = await this.getUtxos(address);\n      const totalUtxoAmount = utxos.reduce((sum, utxo) => sum + (utxo.data.bsv21.amt || 0), 0);\n      if (totalUtxoAmount < totalAtomicTokenAmount) {\n        return { error: 'Insufficient MNEE balance' };\n      }\n\n      const fee =\n        request.find((req) => req.address === config.burnAddress) !== undefined\n          ? 0\n          : config.fees.find(\n              (fee: { min: number; max: number }) =>\n                totalAtomicTokenAmount >= fee.min && totalAtomicTokenAmount <= fee.max,\n            )?.fee;\n      if (fee === undefined) return { error: 'Fee ranges inadequate' };\n\n      const tx = new Transaction(1, [], [], 0);\n      let tokensIn = 0;\n      const signingAddresses: string[] = [];\n      let changeAddress = '';\n\n      while (tokensIn < totalAtomicTokenAmount + fee) {\n        const utxo = utxos.shift();\n        if (!utxo) return { error: 'Insufficient MNEE balance' };\n\n        const sourceTransaction = await this.fetchBeef(utxo.txid);\n        if (!sourceTransaction) return { error: 'Failed to fetch source transaction' };\n\n        signingAddresses.push(utxo.owners[0]);\n        changeAddress = changeAddress || utxo.owners[0];\n        tx.addInput({\n          sourceTXID: utxo.txid,\n          sourceOutputIndex: utxo.vout,\n          sourceTransaction,\n          unlockingScript: new UnlockingScript(),\n        });\n        tokensIn += utxo.data.bsv21.amt;\n      }\n\n      for (const req of request) {\n        tx.addOutput(await this.createInscription(req.address, this.toAtomicAmount(req.amount), config));\n      }\n      if (fee > 0) tx.addOutput(await this.createInscription(config.feeAddress, fee, config));\n\n      const change = tokensIn - totalAtomicTokenAmount - fee;\n      if (change > 0) {\n        tx.addOutput(await this.createInscription(changeAddress, change, config));\n      }\n\n      const sigRequests: SignatureRequest[] = tx.inputs.map((input, index) => {\n        if (!input.sourceTXID) throw new Error('Source TXID is undefined');\n        return {\n          prevTxid: input.sourceTXID,\n          outputIndex: input.sourceOutputIndex,\n          inputIndex: index,\n          address: signingAddresses[index],\n          script: input.sourceTransaction?.outputs[input.sourceOutputIndex].lockingScript.toHex(),\n          satoshis: input.sourceTransaction?.outputs[input.sourceOutputIndex].satoshis || 1,\n          sigHashType:\n            TransactionSignature.SIGHASH_ALL |\n            TransactionSignature.SIGHASH_ANYONECANPAY |\n            TransactionSignature.SIGHASH_FORKID,\n        };\n      });\n\n      const rawtx = tx.toHex();\n      const res = await this.getSignatures({ rawtx, sigRequests }, privateKey);\n      if (!res?.sigResponses) return { error: 'Failed to get signatures' };\n\n      for (const sigResponse of res.sigResponses) {\n        tx.inputs[sigResponse.inputIndex].unlockingScript = new Script()\n          .writeBin(Utils.toArray(sigResponse.sig, 'hex'))\n          .writeBin(Utils.toArray(sigResponse.pubKey, 'hex'));\n      }\n\n      const base64Tx = Utils.toBase64(tx.toBinary());\n      const response = await fetch(`${this.mneeApi}/v1/transfer?auth_token=${this.mneeApiKey}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ rawtx: base64Tx }),\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const { rawtx: responseRawtx } = await response.json();\n      if (!responseRawtx) return { error: 'Failed to broadcast transaction' };\n\n      const decodedBase64AsBinary = Utils.toArray(responseRawtx, 'base64');\n      const tx2 = Transaction.fromBinary(decodedBase64AsBinary);\n      await this.broadcast(tx2);\n\n      return { txid: tx2.id('hex'), rawtx: Utils.toHex(decodedBase64AsBinary) };\n    } catch (error) {\n      let errorMessage = 'Transaction submission failed';\n      if (error instanceof Error) {\n        errorMessage = error.message;\n        if (error.message.includes('HTTP error')) {\n          // Add more specific error handling if needed based on response status\n          console.error('HTTP error details:', error);\n        }\n      }\n      console.error('Failed to transfer tokens:', errorMessage);\n      return { error: errorMessage };\n    }\n  }\n\n  public async getBalance(address: string): Promise<MNEEBalance> {\n    try {\n      const config = this.mneeConfig || (await this.getCosignerConfig());\n      if (!config) throw new Error('Config not fetched');\n      const res = await this.getUtxos(address);\n      const balance = res.reduce((acc, utxo) => {\n        if (utxo.data.bsv21.op === 'transfer') {\n          acc += utxo.data.bsv21.amt;\n        }\n        return acc;\n      }, 0);\n\n      const decimalAmount = this.fromAtomicAmount(balance);\n      return { amount: balance, decimalAmount };\n    } catch (error) {\n      console.error('Failed to fetch balance:', error);\n      return { amount: 0, decimalAmount: 0 };\n    }\n  }\n\n  public async validateMneeTx(rawTx: string, request?: SendMNEE[]) {\n    try {\n      const config = this.mneeConfig || (await this.getCosignerConfig());\n      if (!config) throw new Error('Config not fetched');\n      const tx = Transaction.fromHex(rawTx);\n      const scripts = tx.outputs.map((output) => output.lockingScript);\n      const parsedScripts = parseCosignerScripts(scripts);\n\n      if (!request) {\n        parsedScripts.forEach((parsed) => {\n          if (parsed?.cosigner !== '' && parsed?.cosigner !== config.approver) {\n            throw new Error('Invalid or missing cosigner');\n          }\n        });\n      } else {\n        request.forEach((req, idx) => {\n          const { address, amount } = req;\n          const cosigner = parsedScripts.find((parsed) => parsed?.cosigner === config.approver);\n          if (!cosigner) {\n            throw new Error(`Cosigner not found for address: ${address} at index: ${idx}`);\n          }\n\n          const addressFromScript = parsedScripts.find((parsed) => parsed?.address === address);\n          if (!addressFromScript) {\n            throw new Error(`Address not found in script for address: ${address} at index: ${idx}`);\n          }\n          const script = tx.outputs[idx].lockingScript;\n          const inscription = parseInscription(script);\n          const content = inscription?.file?.content;\n          if (!content) throw new Error('Invalid inscription content');\n          const inscriptionData = Utils.toUTF8(content);\n          if (!inscriptionData) throw new Error('Invalid inscription content');\n          const inscriptionJson: MneeInscription = JSON.parse(inscriptionData);\n          if (inscriptionJson.p !== 'bsv-20') throw new Error(`Invalid bsv 20 protocol: ${inscriptionJson.p}`);\n          if (inscriptionJson.op !== 'transfer') throw new Error(`Invalid operation: ${inscriptionJson.op}`);\n          if (inscriptionJson.id !== config.tokenId) throw new Error(`Invalid token id: ${inscriptionJson.id}`);\n          if (inscriptionJson.amt !== this.toAtomicAmount(amount).toString()) {\n            throw new Error(`Invalid amount: ${inscriptionJson.amt}`);\n          }\n        });\n      }\n\n      return true;\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n  }\n\n  private async getMneeSyncs(address: string, fromScore = 0, limit = 100): Promise<MneeSync[] | undefined> {\n    try {\n      const response = await fetch(\n        `${this.mneeApi}/v1/sync?auth_token=${this.mneeApiKey}&from=${fromScore}&limit=${limit}`,\n        {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify([address]),\n        },\n      );\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data: MneeSync[] = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Failed to fetch config:', error);\n      return undefined;\n    }\n  }\n\n  public async getRecentTxHistory(address: string, fromScore?: number, limit?: number): Promise<TxHistoryResponse> {\n    try {\n      const config = this.mneeConfig || (await this.getCosignerConfig());\n      if (!config) throw new Error('Config not fetched');\n\n      const syncs = await this.getMneeSyncs(address, fromScore, limit);\n      if (!syncs || syncs.length === 0) return { history: [], nextScore: fromScore || 0 };\n\n      const txHistory: TxHistory[] = [];\n      for (const sync of syncs) {\n        const historyItem = parseSyncToTxHistory(sync, address, config);\n        if (historyItem) {\n          txHistory.push(historyItem);\n        }\n      }\n\n      const sortedByHeight = txHistory.sort((a, b) => b.height - a.height);\n      const sortedUnconfirmedFirst = sortedByHeight.sort((a, b) => (a.status === 'unconfirmed' ? -1 : 1));\n\n      if (sortedUnconfirmedFirst.length === 0) return { history: [], nextScore: fromScore || 0 };\n      if (limit && sortedUnconfirmedFirst.length > limit) {\n        return {\n          history: sortedUnconfirmedFirst.slice(0, limit),\n          nextScore: sortedUnconfirmedFirst[limit - 1].score,\n        };\n      }\n\n      const nextScore = txHistory[txHistory.length - 1].score;\n\n      return { history: sortedUnconfirmedFirst, nextScore };\n    } catch (error) {\n      console.error('Failed to fetch tx history:', error);\n      return { history: [], nextScore: fromScore || 0 };\n    }\n  }\n\n  private async parseTransaction(tx: Transaction, config: MNEEConfig): Promise<ParseTxResponse> {\n    const txid = tx.id('hex');\n    const outScripts = tx.outputs.map((output) => output.lockingScript);\n    const sourceTxs = tx.inputs.map((input) => {\n      return { txid: input.sourceTXID, vout: input.sourceOutputIndex };\n    });\n\n    let inputs = [];\n    let outputs = [];\n    let inputTotal = 0n;\n    let outputTotal = 0n;\n    let environment: Environment = 'production';\n    let type: TxOperation = 'transfer';\n    for (const tx of sourceTxs) {\n      if (!tx.txid) continue;\n      const fetchedTx = await this.fetchBeef(tx.txid);\n      const output = fetchedTx.outputs[tx.vout];\n      const parsedCosigner = parseCosignerScripts([output.lockingScript])[0];\n      if (parsedCosigner?.address === config.mintAddress) {\n        type = txid === config.tokenId.split('_')[0] ? 'deploy' : 'mint';\n      }\n      const insc = parseInscription(output.lockingScript);\n      const content = insc?.file?.content;\n      if (!content) continue;\n      const inscriptionData = Utils.toUTF8(content);\n      if (!inscriptionData) continue;\n      const inscriptionJson: MneeInscription = JSON.parse(inscriptionData);\n      if (inscriptionJson) {\n        const isProdToken = inscriptionJson.id === this.prodTokenId;\n        const isProdApprover = parsedCosigner.cosigner === this.prodApprover;\n        const isEmptyCosigner = parsedCosigner.cosigner === '';\n        const isMint = inscriptionJson.op === 'deploy+mint';\n        const isProdAddress = parsedCosigner.address === this.prodAddress;\n        const isDevAddress = parsedCosigner.address === this.devAddress;\n        const isQaAddress = parsedCosigner.address === this.qaAddress;\n        const isStageAddress = parsedCosigner.address === this.stageAddress;\n\n        if (!isProdToken || !isProdApprover) {\n          if (isEmptyCosigner && isMint && isProdAddress) {\n            environment = 'production';\n            type = 'mint';\n          } else {\n            environment = 'sandbox';\n          }\n        }\n\n        if (type === 'transfer' && (isProdAddress || isDevAddress || isQaAddress || isStageAddress)) {\n          type = 'mint';\n        }\n\n        inputTotal += BigInt(inscriptionJson.amt);\n        inputs.push({\n          address: parsedCosigner.address,\n          amount: parseInt(inscriptionJson.amt),\n        });\n      }\n    }\n\n    for (const script of outScripts) {\n      const parsedCosigner = parseCosignerScripts([script])[0];\n      const insc = parseInscription(script);\n      const content = insc?.file?.content;\n      if (!content) continue;\n      const inscriptionData = Utils.toUTF8(content);\n      if (!inscriptionData) continue;\n      const inscriptionJson = JSON.parse(inscriptionData);\n      if (inscriptionJson) {\n        if (inscriptionJson.op === 'burn') {\n          type = 'burn';\n        }\n        const isProdToken = inscriptionJson.id === this.prodTokenId;\n        const isProdApprover = parsedCosigner.cosigner === this.prodApprover;\n        const isEmptyCosigner = parsedCosigner.cosigner === '';\n        const isProdAddress = parsedCosigner.address === this.prodAddress;\n        const isDeploy = inscriptionJson.op === 'deploy+mint';\n\n        if (isDeploy) {\n          type = 'deploy';\n        }\n\n        if (!isProdToken || !isProdApprover) {\n          if (isEmptyCosigner && isProdAddress) {\n            environment = 'production';\n          } else {\n            environment = 'sandbox';\n          }\n        }\n        outputTotal += BigInt(inscriptionJson.amt);\n        outputs.push({\n          address: parsedCosigner.address,\n          amount: parseInt(inscriptionJson.amt),\n        });\n      }\n    }\n\n    if (type !== 'deploy' && inputTotal !== outputTotal) {\n      throw new Error('Inputs and outputs are not equal');\n    }\n\n    if (txid === this.prodTokenId.split('_')[0]) {\n      environment = 'production';\n    } else if ([this.devTokenId, this.qaTokenId, this.stageTokenId].some((id) => txid === id.split('_')[0])) {\n      environment = 'sandbox';\n    }\n\n    return { txid, environment, type, inputs, outputs };\n  }\n\n  public async parseTx(txid: string): Promise<ParseTxResponse> {\n    const config = this.mneeConfig || (await this.getCosignerConfig());\n    if (!config) throw new Error('Config not fetched');\n    const tx = await this.fetchBeef(txid);\n    if (!tx) throw new Error('Failed to fetch transaction');\n    return await this.parseTransaction(tx, config);\n  }\n\n  public async parseTxFromRawTx(rawTxHex: string): Promise<ParseTxResponse> {\n    const tx = Transaction.fromHex(rawTxHex);\n    const config = this.mneeConfig || (await this.getCosignerConfig());\n    if (!config) throw new Error('Config not fetched');\n    return await this.parseTransaction(tx, config);\n  }\n}\n","import { MNEEService } from './mneeService.js';\nimport {\n  MNEEBalance,\n  MNEEConfig,\n  SdkConfig,\n  ParseTxResponse,\n  SendMNEE,\n  TransferResponse,\n  TxHistoryResponse,\n} from './mnee.types.js';\nexport * from './mnee.types.js';\n\nexport interface MneeInterface {\n  config(): Promise<MNEEConfig | undefined>;\n  balance(address: string): Promise<MNEEBalance>;\n  validateMneeTx(rawtx: string, request?: SendMNEE[]): Promise<boolean>;\n  transfer(request: SendMNEE[], wif: string): Promise<TransferResponse>;\n  toAtomicAmount(amount: number): number;\n  fromAtomicAmount(amount: number): number;\n  recentTxHistory(address: string, fromScore?: number, limit?: number): Promise<TxHistoryResponse>;\n  parseTx(txid: string): Promise<ParseTxResponse>;\n  parseTxFromRawTx(rawTxHex: string): Promise<ParseTxResponse>;\n}\n\n/**\n * Represents the Mnee class that provides methods to interact with the MNEE service.\n */\nexport default class Mnee implements MneeInterface {\n  private service: MNEEService;\n\n  constructor(config: SdkConfig) {\n    this.service = new MNEEService(config);\n  }\n\n  /**\n   * Validates an MNEE transaction.\n   *\n   * @param rawtx - The raw transaction to validate.\n   * @param request - An array of SendMNEE objects representing the transfer details. Use this parameter to validate the transaction against the specified transfer details. If it is not provided, it will only validate that the transaction is well-formed with the cosigner.\n   * @returns A promise that resolves to a boolean indicating whether the transaction is valid.\n   */\n  async validateMneeTx(rawtx: string, request?: SendMNEE[]): Promise<boolean> {\n    return this.service.validateMneeTx(rawtx, request);\n  }\n\n  /**\n   * Converts a given amount to its atomic representation based on the specified number.\n   *\n   * @param amount - The amount to be converted.\n   * @returns The atomic representation of the given amount.\n   *\n   * @example\n   * ```typescript\n   * toAtomicAmount(1.5); // 150000\n   * ```\n   */\n  toAtomicAmount(amount: number): number {\n    return this.service.toAtomicAmount(amount);\n  }\n\n  /**\n   * Converts a given atomic amount to its human-readable representation.\n   *\n   * @param amount - The atomic amount to be converted.\n   * @returns The human-readable representation of the given atomic amount.\n   *\n   * @example\n   * ```typescript\n   * fromAtomicAmount(150000); // 1.5\n   * ```\n   */\n  fromAtomicAmount(amount: number): number {\n    return this.service.fromAtomicAmount(amount);\n  }\n\n  /**\n   * Retrieves the configuration for the MNEE service.\n   *\n   * @returns {Promise<MNEEConfig | undefined>} A promise that resolves to the MNEE configuration object,\n   * or undefined if the configuration could not be retrieved.\n   */\n  async config(): Promise<MNEEConfig | undefined> {\n    return this.service.getCosignerConfig();\n  }\n\n  /**\n   * Retrieves the balance for a given address.\n   *\n   * @param address - The address to retrieve the balance for.\n   * @returns A promise that resolves to an MNEEBalance object containing the balance information.\n   */\n  async balance(address: string): Promise<MNEEBalance> {\n    return this.service.getBalance(address);\n  }\n\n  /**\n   * Transfers the specified MNEE tokens using the provided WIF (Wallet Import Format) key.\n   *\n   * @param {SendMNEE[]} request - An array of SendMNEE objects representing the transfer details.\n   * @param {string} wif - The Wallet Import Format key used to authorize the transfer.\n   * @returns {Promise<TransferResponse>} A promise that resolves to a TransferResponse object containing the result of the transfer.\n   */\n  async transfer(request: SendMNEE[], wif: string): Promise<TransferResponse> {\n    return this.service.transfer(request, wif);\n  }\n\n  /**\n   * Retrieves the recent transaction history for a given address.\n   *\n   * @param address - The address to retrieve the transaction history for.\n   * @param fromScore - The starting score to retrieve the transaction history from.\n   * @param limit - The maximum number of transactions to retrieve.\n   * @returns A promise that resolves to a TxHistoryResponse object containing the transaction\n   * history and the next score to retrieve additional transactions.\n   */\n  async recentTxHistory(address: string, fromScore?: number, limit?: number): Promise<TxHistoryResponse> {\n    return this.service.getRecentTxHistory(address, fromScore, limit);\n  }\n\n  /**\n   * Parses a transaction based on the provided transaction ID.\n   *\n   * @param txid - The unique identifier of the transaction to be parsed.\n   * @returns A promise that resolves to a `ParseTxResponse` containing the parsed transaction details.\n   */\n  async parseTx(txid: string): Promise<ParseTxResponse> {\n    return this.service.parseTx(txid);\n  }\n\n  /**\n   * Parses a transaction from a raw transaction hex string.\n   *\n   * @param rawTxHex - The raw transaction hex string to be parsed.\n   * @returns A promise that resolves to a `ParseTxResponse` containing the parsed transaction details.\n   */\n  async parseTxFromRawTx(rawTxHex: string): Promise<ParseTxResponse> {\n    return this.service.parseTxFromRawTx(rawTxHex);\n  }\n}\n"],"names":["CosignTemplate","lock","userPKHash","approverPubKey","pkhash","hash","Utils","fromBase58Check","prefix","Error","data","lockingScript","LockingScript","writeOpCode","OP","OP_DUP","OP_HASH160","writeBin","OP_EQUALVERIFY","OP_CHECKSIGVERIFY","encode","OP_CHECKSIG","userUnlock","userPrivateKey","signOutputs","anyoneCanPay","sourceSatoshis","sign","async","tx","inputIndex","_input$sourceTransact","_input$sourceTransact2","_input$sourceTransact3","signatureScope","TransactionSignature","SIGHASH_FORKID","SIGHASH_ALL","SIGHASH_NONE","SIGHASH_SINGLE","SIGHASH_ANYONECANPAY","input","inputs","otherInputs","filter","_","index","sourceTXID","sourceTransaction","id","outputs","sourceOutputIndex","satoshis","preimage","format","transactionVersion","version","inputSequence","sequence","subscript","lockTime","scope","rawSignature","Hash","sha256","sig","r","s","unlockScript","UnlockingScript","toChecksigFormat","toPublicKey","estimateLength","unlock","approverPrivateKey","userSigScript","_input$sourceTransact4","_input$sourceTransact5","_input$sourceTransact6","writeScript","parseInscription","script","_value$data","_value$data2","fromPos","i","chunks","length","_chunk$data","chunk","toUTF8","op","OP_IF","OP_FALSE","undefined","insc","file","size","type","fields","_field$data","_field$data2","field","OP_ENDIF","OP_16","value","OP_PUSHDATA4","fieldNo","toBase64","content","Buffer","from","toString","parseCosignerScripts","scripts","map","_chunks$data","_chunks$data2","_chunks$data3","cosigner","toHex","address","toBase58Check","parseSyncToTxHistory","sync","config","txType","senders","includes","txStatus","height","rawtx","txArray","toArray","txHex","outScripts","Transaction","fromHex","output","mneeScripts","parsedOutScripts","mneeAddresses","feeAddressIndex","indexOf","feeAddress","sender","fee","counterpartyAmounts","Map","forEach","parsedScript","_parsedScript$file","inscriptionData","inscriptionJson","JSON","parse","err","console","error","p","tokenId","inscriptionAmt","parseInt","amt","Number","isNaN","outAddr","prevAmt","get","set","amountSentToAddress","senderAmt","counterparties","amount","Array","entries","addr","cp","totalCounterpartyAmount","reduce","sum","txid","status","score","MNEEService","constructor","this","prodTokenId","prodApprover","prodAddress","devTokenId","devAddress","qaTokenId","qaAddress","stageTokenId","stageAddress","productionMneeApi","sandboxMneeApi","gorillaPoolApi","mneeApiKey","mneeConfig","mneeApi","apiKey","environment","getCosignerConfig","response","fetch","method","ok","json","toAtomicAmount","Math","round","decimals","fromAtomicAmount","createInscription","recipient","jsOneSat","applyInscription","PublicKey","fromString","approver","dataB64","stringify","contentType","getUtxos","ops","headers","body","utxo","bsv21","toLowerCase","broadcast","url","toBinary","message","code","description","fetchBeef","resp","beef","arrayBuffer","fromAtomicBEEF","getSignatures","request","privateKey","DEFAULT_SIGHASH_TYPE","fromHexBEEF","fromHexEF","sigResponses","sigRequests","flatMap","sigReq","privKey","prevTxid","outputIndex","Script","P2PKH","toAddress","sigHashType","pubKey","csIdx","Promise","resolve","_err$message","cause","transfer","wif","_config$fees$find","totalAmount","req","totalAtomicTokenAmount","PrivateKey","fromWif","utxos","find","burnAddress","fees","min","max","tokensIn","signingAddresses","changeAddress","shift","push","owners","addInput","vout","unlockingScript","addOutput","change","res","sigResponse","base64Tx","responseRawtx","decodedBase64AsBinary","tx2","fromBinary","errorMessage","getBalance","balance","acc","decimalAmount","validateMneeTx","rawTx","parsedScripts","idx","_inscription$file","parsed","inscription","getMneeSyncs","fromScore","limit","getRecentTxHistory","syncs","history","nextScore","txHistory","historyItem","sortedUnconfirmedFirst","sort","a","b","slice","parseTransaction","sourceTxs","inputTotal","outputTotal","_insc$file","parsedCosigner","mintAddress","split","isProdAddress","BigInt","_insc$file2","some","parseTx","parseTxFromRawTx","rawTxHex","Mnee","service","recentTxHistory"],"mappings":"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"}